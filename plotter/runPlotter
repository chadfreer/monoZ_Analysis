#!/usr/bin/env python
import ROOT
ROOT.gROOT.SetBatch(True)
ROOT.PyConfig.IgnoreCommandLineOptions = True
import argparse
import array
import os
import plotting
import re
import sys


def doPlots(args, analysisResult, plotsToProcess):
    ROOT.gStyle.SetOptDate(args.date)
    if not args.noForceStyle:
        plotting.styles.forceStyle()

    if os.path.exists(args.outputDir):
        print "Warning: Output directory %s exists!" % args.outputDir
    else:
        os.makedirs(args.outputDir)

    for plot in plotsToProcess:
        c = plotting.stackUp(analysisResult, plot, args.callback)
        axisPrimitive = plotting.getAxisPrimitive(c)
        if "TH2" in axisPrimitive.ClassName() or (axisPrimitive.ClassName() == "THStack" and "TH2" in axisPrimitive.GetHists()[0].ClassName()):
            print "INFO: skipping TH2 plot", plot
            continue
        c.SetLogy(args.logy)
        if args.logy:
            axisPrimitive.SetMinimum(1)
        else:
            axisPrimitive.SetMinimum(0.01)
        if not args.noData:
            c = plotting.splitCanvas(c)
        plotting.drawCMSstuff(lumi=args.lumi, grayText=args.grayText)
        c.Print(os.path.join(args.outputDir, "%s.pdf" % plot))
        c.Print(os.path.join(args.outputDir, "%s.root" % plot))


def main():
    parser = argparse.ArgumentParser(description="Makes plots and combine shapes from MonoZSelector output", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    def rootFileType(fileName):
        f = ROOT.TFile.Open(fileName)
        if not f:
            msg = "%s is not a valid ROOT file or could not be opened!" % fileName
            raise argparse.ArgumentTypeError(msg)
        return f

    def regexType(pattern):
        try:
            compiled = re.compile(pattern)
        except:
            msg = "%s is not a valid python regular expression" % pattern
            raise argparse.ArgumentTypeError(msg)
        return compiled

    parser.add_argument("inputFile", help="Input file(s) will be searched for datasets in order", type=rootFileType, nargs="+")

    dataOpts = parser.add_argument_group("Data options")
    dataOpts.add_argument("--noData",  help="Don't plot data points", action="store_true")
    dataOpts.add_argument("--lumi",  help="Luminosity (unit: 1/pb)", type=float, default=1000.)

    signalOpts = parser.add_argument_group("Signal options")
    signalOpts.add_argument("--signal", help="Signal process plotGroup(s)", action="append")

    bkgOpts = parser.add_argument_group("Miscellaneous background options")
    bkgOpts.add_argument("--stack", help="Stack these plotGroups for backgrounds (bottom-up)", default="Nonresonant,ZZ2l2nu,WZ3lnu,ZZ4l,Other,DrellYan")

    callbackOpts = parser.add_argument_group("Histogram modification options.  (Consider using --include to narrow down to plots you actually want to modify)")
    callbackOpts.add_argument("--projX", help="Call TH2D::ProjectionX, with min and max Y bin", nargs=2, default=None)
    callbackOpts.add_argument("--rebin", help="Specify alternate binning in comma-separated list", default=None)

    plotOpts = parser.add_argument_group("Plotting options")
    plotOpts.add_argument("--date", help="Adds date in lower left corner of plots", action="store_true")
    plotOpts.add_argument("--noForceStyle", help="Don't force style in plotting.styles.forceStyle()", action="store_true")
    plotOpts.add_argument("--grayText", help="Gray text label added to all plots", default="")
    plotOpts.add_argument("--include", help="Include only plots with names matching INCLUDE", action="append", type=regexType)
    plotOpts.add_argument("--logy", help="Set log Y", action="store_true")

    outputOpts = parser.add_argument_group("Output options")
    outputOpts.add_argument("--outputDir",  help="Output directory for plots (will create subfolders)", required=True)

    args = parser.parse_args()

    # -----
    args.callback = plotting.buildCallback(args)

    selectorResults = []
    for inFile in args.inputFile:
        res = plotting.SelectorResult(inFile, luminosity=args.lumi)
        selectorResults.append(res)
    aresult = plotting.AnalysisResult(args, selectorResults)

    if args.include:
        plotsToProcess = []
        for plot in aresult.availablePlots:
            match = [1 for i in args.include if i.match(plot)]
            if sum(match) > 0:
                plotsToProcess.append(plot)
    else:
        plotsToProcess = aresult.availablePlots

    doPlots(args, aresult, plotsToProcess)


if __name__ == "__main__":
    main()
